<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        html, body {
            height: 100%;
        }
        body {
            margin: 0;
            display: grid;
            grid-template-areas: "file view";
            grid-template-columns: 1fr 1fr;
        }

        #savedFile {
            grid-area: file;
            background-color: darkcyan;
            color: white;
        }

        #view {
            grid-area: view;
            background-color: antiquewhite;
        }

        #view,
        #savedFile {
            font-size: 16px;
            font-family: monospace;
        }

        .html-id {
            background-color: black;
            color: white
        }
    </style>

    <style>
        /* FUNCTIONALITY */
        .line:hover {
            background-color: aqua;
        }

        .line {
            border-left: 1px solid red
        }

        .data-id {
            display: none;
            visibility: hidden;
        }

        /* JSON */
        .json-property {
            color: white;
            background-color: pink;
        }

        /* JS */
        .js-comments-multiline {
            color: white;
            background-color: pink;
        }

        .js-comments-singleline {
            color: white;
            background-color: pink;
        }

        .js-string {
            color: white;
            background-color: pink;
        }

        .js-string-literal {
            color: white;
            background-color: red;
        }

        

        .js-property {
            color: white;
            background-color: pink;
        }

        .js-method-name {
            color: white;
            background-color: pink;
        }

        .js-symbol {
            color: white;
            background-color: pink;
        }

        .js-literal-quote-open {
            color: pink;
            background-color: black;
        }

        .js-literal-quote-close {
            color: pink;
            background-color: black;
        }

        .js-keyword {
            color: white;
            background-color: pink;
        }

        .js-path-part {
            color: white;
            background-color: pink;
        }

        .js-variable {
            color: white;
            background-color: pink;
        }

        .js-private-variable {
            color: white;
            background-color: pink;
        }

        /* CSS */

        .css-selector {
            color: white;
            background-color: pink;
        }

        .css-property {
            color: white;
            background-color: pink;
        }

        .css-value {
            color: white;
            background-color: pink;
        }

        .css-curly-brace-open {
            color: white;
            background-color: pink;
        }

        .css-curly-brace-close {
            color: white;
            background-color: pink;
        }

        .css-colon {
            color: white;
            background-color: pink;
        }

        .css-semi-colon {
            color: white;
            background-color: pink;
        }

        /* HTML */

        .html-opening-tag-name,
        .html-closing-tag-name {
            color: white;
            background-color: pink;
        }

        .html-equals {
            color: white;
            background-color: pink;
        }

        .html-spacer {
            color: white;
            background-color: pink;
        }

        .html-open-quote {
            color: white;
            background-color: pink;
        }

        .html-close-quote {
            color: white;
            background-color: pink;
        }

        .html-attr-name {
            color: white;
            background-color: pink;
        }

        .html-attr-value {
            color: white;
            background-color: pink;
        }

        .html-back-slash {
            color: white;
            background-color: pink;
        }

        .html-open-bracket {
            color: white;
            background-color: pink;
        }


        .html-close-bracket {
            color: white;
            background-color: pink;
        }

       


    </style>
</head>
<body>
    <type-preview id="preview">

    </type-preview>
    <div id="view" contenteditable="plaintext-only" spellcheck="false"></div>

    <script>
        class Counter {
            constructor(prefix = ""){
                this.prefix = prefix
                this.counter = 0;
            }

            new(){
               return this.counter++ 
            }

        }

        const HTMLCounter = new Counter("html");


        class TypePreview extends HTMLElement {
            constructor(){
                super();

            }

            onUpdate(dataID, value){
                console.log("TELL OWNER EDITOR: ", dataID, value)
            }

            connectedCallback() {
                this.shadow = this.attachShadow({mode: "open"});

                const style = document.createElement("style")
                style.textContent = `
                   
                    [data-id]:hover {
                        border: 1px dashed grey;
                    }

                    [data-id]:focus {
                        border: 1px dashed red;
                        outline: none;
                    }
                `

                
                this.wrapper = document.createElement("div")
                this.wrapper.setAttribute("id", "type-preview-wrapper");

                this.shadow.append(style, this.wrapper)

                this.wrapper.addEventListener("click", (event) => {
                    const element = event.target;
                    const dataID = element.dataset.id;
                    const nodeName = element.nodeName.toLowerCase();

                    if(nodeName === "a"){
                        event.preventDefault();
                        console.log("disabled clicks on links");
                    }

                    if(dataID){
                        
                        //element.contentEditable = "plaintext-only";
                        element.setAttribute("contenteditable", "plaintext-only")
                        element.setAttribute("spellcheck", "false")
                        element.focus()
                        const beforeData = element.textContent;


                        element.addEventListener("blur", (event) => {
                            //element.contentEditable = false;
                            element.removeAttribute("spellcheck")
                            element.removeAttribute("contenteditable")
                            if (beforeData !== element.textContent) {
                                this.onUpdate(dataID, element.innerHTML)
                            } 
                        }, {once: true})
                    }
                })

            }

            set HTML(plaintext){
                const parser = new DOMParser();


                const doc = parser.parseFromString(plaintext, "text/html");
                const scripts = doc.querySelectorAll("script");

                const newScripts = Array.from(scripts).map(script => {
                    const scriptElement = document.createElement("script")
                    scriptElement.textContent = script.textContent;
                    script.remove()

                    return scriptElement;
                })

                const styles = doc.querySelectorAll("style");

                const newStyles = Array.from(styles).map(style => {
                    const styleElement = document.createElement("style")
                    styleElement.textContent = style.textContent;
                    style.remove()

                    return styleElement;
                })


                this.wrapper.replaceChildren(...doc.querySelector("body").childNodes)
                this.wrapper.append(...newScripts, ...newStyles)
            }


        }

        customElements.define("type-preview", TypePreview)

        const view = document.getElementById("view")
        const preview = document.getElementById("preview")

        preview.onUpdate = (dataID, value) => {

            const element = view.querySelector(`[data-id='${dataID}']`)
            const tagname = element.textContent;


            let walkNode = element;

            while(walkNode) {
                if (walkNode.classList.contains("html-close-bracket")) {
                    break;
                }

                walkNode = walkNode.nextElementSibling;
            }



            const treeWalk = document.createTreeWalker(view, NodeFilter.SHOW_ELEMENT);
            let startNode = null;
            let endNode = null;

            let process = null;

            while(treeWalk.nextNode()){
                if(treeWalk.currentNode === element){
                    process = true;
                }

                if(process){
                    if(!startNode){
                        // Looking for closing bracket
                        if(treeWalk.currentNode.classList.contains("html-close-bracket")){
                            startNode = treeWalk.currentNode.nextSibling
                        }
                    } else {
                        if(treeWalk.currentNode.classList.contains("html-closing-tag-name")){
                            // Check if its a matching closing tag
                            if(treeWalk.currentNode.textContent === tagname){
                                endNode = treeWalk.currentNode.previousSibling.previousSibling.previousSibling
                            }
                        }
                    }
                }
            }

            const range = document.createRange();

            range.setStartAfter(startNode, 0);
            range.setEnd(endNode, endNode.textContent.length - 1);

            mySelection.selection.addRange(range);

            range.deleteContents()

            value = value.replace(/ data-id="[\w-]+"/g, "")
            
            const parsedText = parse(value, "html");
            const docFragment = createFragmentFromString(parsedText);

            startNode.replaceWith(...docFragment.firstChild.childNodes)




        }

        const wrap = (plaintext = "", classList = [], {tagname = "span", id = false} = {}) => {
            const wrapper = document.createElement(tagname);
            wrapper.classList.add(...classList)
            if(id){
                wrapper.setAttribute("data-id", id)
            }
            const textNode = document.createTextNode(plaintext);

            wrapper.append(textNode);

            return wrapper.outerHTML
        }

        const patterns = [{
                mimetype: "js",
                name: "multilineComments",
                re: /(?<multilineComments>\/\*[\s\S]*?\*\/)/g,
                replacerFn: ({multilineComments} = {}) => { 
                    const html = multilineComments
                                    .split("\n")
                                    .map((line) => {
                                        return wrap(line, ["js-comments-multiline"]);
                                    })
                                    .join("\n")

                    return html
                }
            },{
                mimetype: "js",
                name: "singleLineComment",
                re: /(?<singleLineComment>\/\/.*)/g,
                replacerFn: ({singleLineComment} = {}) => { 
                    let html = wrap(singleLineComment, ["js-comments-singleline"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "stringLiteral",
                re: /`(?<stringLiteral>[\s\S]*?)`/g,
                    replacerFn: ({stringLiteral} = {}) => { 
                    const variableRe = /\${ *(?<variable>[\w.\[\]"']*) *}/g;
                        
                    let html = wrap("`", ["js-literal-quote-open"]);
                    html += html = wrap(stringLiteral, ["js-string-literal"]);
                    html += html = wrap("`", ["js-literal-quote-close"]);


                    html = html.replace(variableRe, (match, variable) => {
                        let _html = wrap("$", ["js-string-literal-dollar"])
                        _html += wrap("{", ["js-string-literal-curly-brace-open"])
                        _html += wrap(variable, ["js-string-literal-curly-brace-close"])
                        _html += wrap("}", ["js-string-literal-curly-brace-close"])

                        return _html
                    })
            
                    return html
                }
            },{
                mimetype: "js",
                name: "string",
                re: /(?<string>((?<=')(?:[^'].*)(?='))|(?<=\")(?:[^\"].*)(?=\"))/g,
                replacerFn: ({string} = {}) => { 
                    let html = wrap(string, ["js-string"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "jsonProperty",
                re: /(?!")(?<jsonProp>[\w]+(?="* *:))/g,
                replacerFn: ({jsonProp} = {}) => { 
                    let html = wrap(jsonProp, ["json-property"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "property",
                re: /(?<property>#{0,1}[\w]+)(?= *=)/g,
                replacerFn: ({property} = {}) => { 
                    let html = wrap(property, ["js-property"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "method",
                re: /(?<method>#{0,1}[\w]+ *\()/g,
                replacerFn: ({method} = {}) => { 
                    let html = wrap(method, ["js-method-name"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "symbol",
                re: /(?<symbol>=>|[\(\);'\"={}:,])/g,
                    replacerFn: ({symbol} = {}) => { 
                    let html = wrap(symbol, ["js-symbol"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "keyword",
                re: /(?<keyword>\bconst|let|var|static|class\b)/g,
                replacerFn: ({keyword} = {}) => { 
                    let html = wrap(keyword, ["js-keyword", `js-keyword-${keyword}`]);

                    return html
                }
            },{
                mimetype: "js",
                name: "path",
                re: /(?<path>[\w]+\.)/g,
                replacerFn: ({path} = {}) => { 
                    let html = wrap(path, ["js-path-part"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "variable",
                re: /(?<variable>#{0,1}[\w]+)/g,
                replacerFn: ({variable} = {}) => { 
                    const className = (variable.charAt(0) === "#")
                        ? "js-private-variable"
                        : "js-variable"

                    let html = wrap(variable, [className]);

                    return html
                }
            },{
                mimetype: "js",
                name: "encode",
                re: /</g,
                replacerFn: () => {
                    return "&lt;"

                }
            },{
                mimetype: "css",
                name: "encode",
                re: /</g,
                replacerFn: () => {
                    return "&lt;"

                }
            },{
                mimetype: "css",
                name: "selectors",
                re: /(?<indent> *)(?<selector>[\w:> ()-]+)(?= {|,)/g,
                replacerFn: ({indent, selector} = {}, parser) => {
                    let html = wrap(" ".repeat(indent.length), ["spacer"]);
                    html += html = wrap(selector, ["css-selector"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "properties",
                re: /(?<property>[\w-]+)(?= *:)/g,
                replacerFn: ({property} = {}, parser) => {
                    let html = wrap(property, ["css-property"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "values",
                re:  /(?<value>[^:]+)(?= *;)/g,
                replacerFn: ({value} = {}, parser) => {
                    let html = wrap(value, ["css-value"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "curlyBraceOpen",
                re:  /(?<curlyBraceOpen>{)/g,
                replacerFn: ({curlyBraceOpen} = {}, parser) => {
                    let html = wrap("{", ["css-curly-brace-open"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "curlyBraceClose",
                re:   /(?<curlyBraceClose>})/g,
                replacerFn: ({curlyBraceClose} = {}, parser) => {
                    let html = wrap(curlyBraceClose, ["css-curly-brace-close"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "colon",
                re:  /(?<colon>:)/g,
                replacerFn: ({colon} = {}, parser) => {
                    let html = wrap(colon, ["css-colon"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "semiColon",
                re:  /(?<semiColon>;)/g,
                replacerFn: ({semiColon} = {}, parser) => {
                    let html = wrap(semiColon, ["css-semi-colon"]);

                    return html

                }
            },{
                mimetype: "html",
                name: "noParse",
                re: /(?<remove>\[\[\[[\w-]*\]\]\])/g,
                replacerFn: ({remove} = {}, parser) => {
                    return ""

                }
            },{
                /**/
                /* Tagnames (opening and closing tags) */
                mimetype: "html",
                name: "tagnames",
                re: /(?<=<)(?<opentag>[\w-]+)|(?<=\/)(?<closetag>[\w-]+)/g,
                replacerFn: ({opentag, closetag} = {}, parser) => {
                    const tagname = opentag||closetag;
                    const classList = [`html-${tagname}-tag`]
                    const editable = ["style", "script"].indexOf(tagname) === -1;
                    let html = ""

                    if(opentag){
                        classList.push("html-opening-tag-name")
                        if(editable){
                            const uuid = HTMLCounter.new()
                            html += wrap(tagname, classList, {id: `html-${uuid}`});
                            html += wrap(`[[[html-${uuid}]]]`, ["data-id"])
                        } else {
                            html += wrap(tagname, classList);
                        }

                    }
                    
                    if(closetag) {
                        classList.push("html-closing-tag-name")
                        html += wrap(tagname, classList);
                    }

                    return html

                }
            },{
                /* Attributes and Values */
                mimetype: "html",
                name: "tag-attributes",
                re: /(?!<[^<]* )(?<attrName>[\w\-]*)(?<spacer_1> *)=(?<spacer_2> *)(?:(?:(?<quoteType>["'])(?<stringValue>[\/\w.,= \-]*)\k<quoteType>)|(?<value>[\w-.]+))/g,
                replacerFn: ({attrName, spacer_1, spacer_2, quoteType, stringValue, value} = {}, parser) => {
                    let html = wrap(attrName, ["html-attr-name"]);
                    html += html = wrap(" ".repeat(spacer_1.length), ["html-spacer"]);
                    html += html = wrap("=", ["html-equals"]);
                    html += html = wrap(" ".repeat(spacer_2.length), ["html-spacer"]);

                    if(quoteType){
                        html += html = wrap(quoteType, ["html-open-quote"]);
                    }

                    html += html = wrap(stringValue||value, ["html-attr-value"]);

                    if(quoteType){
                        html += html = wrap(quoteType, ["html-close-quote"]);
                    }

                    return html;

                }
            },{
                /* CLosing Tag Bracket: </ */
                mimetype: "html",
                name: "openSlashBracket",
                re: /(?<openSlashBracket><\/)/g,
                replacerFn: ({openSlashBracket} = {}, parser) => {
                    let html = wrap("<", ["html-open-bracket"]);
                    html += html = wrap("/", ["html-back-slash"]);

                    return html
                }
            },{
                /* Bracket: < */
                mimetype: "html",
                name: "openBracket",
                re: /(?<openBracket><)/g,
                replacerFn: ({openBracket} = {}, parser) => {
                    let html = wrap("<", ["html-open-bracket"]);
                    
                    return html
                }
            },{
                /* Self Closing Tag Bracket: /> */
                mimetype: "html",
                name: "slashCloseBracket",
                re: /(?<slashCloseBracket>\/>)/g,
                replacerFn: ({slashCloseBracket} = {}, parser) => {
                    let html = wrap("/", ["html-back-slash"]);
                    html += html = wrap(">;", ["html-open-bracket"]);

                    return html            }
            },{
                /* Bracket: > */
                mimetype: "html",
                name: "closeBracket",
                re: /(?<closeBracket>>)/g,
                replacerFn: ({closeBracket} = {}, parser) => {
                    let html = wrap(">", ["html-close-bracket"]);
                    
                    return html            }
            }]
    
        const cachedPatterns = {}

        const getPatterns = (mimetype) => {

            if(cachedPatterns[mimetype]){
                return cachedPatterns[mimetype];
            }

            const regularExpressions = []
            const replacers = {}

            patterns
                .filter(pattern => pattern.mimetype === mimetype)
                .forEach((pattern, index) => {
                    const uuid = `_PATTERN_${mimetype.toUpperCase()}_${index}`;
                    const modifiedRe = `(?<${uuid}>${pattern.re.source})`

                    regularExpressions.push(modifiedRe)
                    replacers[uuid] = pattern.replacerFn
                })

            const re = new RegExp(regularExpressions.join("|"), "g")
            
            return cachedPatterns[mimetype] = {
                re,
                replacers
            }
        
        } 

        const mimetypeTagMap = {
            "style": "css",
            "script": "js",
        }

        const parse = (doc, mimetype) => {
            const msBefore = Date.now()
            
            const blocksRe = /(?<=<(?<blocktype>script|style)[\w\-=" ]*>)(?<content>[\w\W]*?)(?=<\/\k<blocktype>>)/g;
            const blocks = [];

            doc = doc.replace(blocksRe, (match, blockType, content) => {
                const uuid = crypto.randomUUID();
                let placeholder = `\n{{{${uuid}}}}\n`
                blocks.push({
                    uuid,
                    blockType,
                    content
                })

                return placeholder
            })

            // Firstly need to replace ALL the HTML in the HTML document
            const {re, replacers} = getPatterns(mimetype)

            doc = doc.replace(re, (match, ...args) => {
                const groups = args[args.length - 1];
                const groupsAsArray = Array.from(Object.entries(groups));

                const [uuid] = groupsAsArray.find(([group, value]) => group.startsWith(`_PATTERN_${mimetype.toUpperCase()}_`) && value);

                return replacers[uuid](groups)
            })

            
            // Split into lines
            let docAsLines = splitToLines(doc, mimetype)

            // Cant do a replace on doc. Need to search for the placeholder in the array of lines
            blocks.forEach((block) => {
                const mimetype = mimetypeTagMap[block.blockType];

                const {re, replacers} = getPatterns(mimetype)

                if(Object.keys(replacers).length > 0){
                    
                    const blockDoc = block.content.replace(re, (match, ...args) => {
                        const groups = args[args.length - 1];
                        const groupsAsArray = Array.from(Object.entries(groups));

                        const [uuid] = groupsAsArray.find(([group, value]) => group && group.startsWith(`_PATTERN_${mimetype.toUpperCase()}_`) && value);

                        return replacers[uuid](groups)
                    })

                    const lines = splitToLines(blockDoc, mimetype)

                    docAsLines = docAsLines.replace(`{{{${block.uuid}}}}`, lines)
                }

                
            })

            console.group("TIME EVENT ::: (parse())")
            console.log(`Took ${Date.now() - msBefore} MS`)
            console.groupEnd();

            return docAsLines
            
        }

        const createLine = (plaintext, mimetype) => {
            const wrapper = document.createElement("div")
            wrapper.classList.add("line")
            wrapper.setAttribute("data-mimetype", mimetype)
            wrapper.innerHTML = plaintext;

            return wrapper;
        }

        const splitToLines = (plaintext, mimetype) => {
            const lines = plaintext
                            .split("\n")
                            .map((line) => {
                                // Do not wrap place holder
                                if(line.startsWith("{{{")){
                                    return line
                                }

                                if(line.trim().length === 0){
                                    line = " "
                                }

                                const newLine = createLine(line, mimetype);
                                return newLine.outerHTML
                            })
                            .join("");

            return lines
        }


        


        const selection = window.getSelection();

        class Selection {
            constructor(){
                this.selection = window.getSelection();
            }

            get selectedText(){
                const range = this.selection.getRangeAt(0);
                
                return range.toString();
            }

            get isCollapsed(){
                return this.selection.isCollapsed
            }

            moveCaretForward(distance = 1) {
                const startLine = this.startLine;
                const line = startLine.line;
                const caretPosition = startLine.caretPosition + distance;

                this.moveCursorToAbsolute(line, caretPosition);
            }

            moveCaretTo(node, caretPosition){
                const range = document.createRange();

                range.selectNodeContents(node)
                this.selection.removeAllRanges();
                this.selection.addRange(range);

                this.selection.setPosition(node, caretPosition)
                
            }

            moveCursorToAbsolute(line, position){
                const walker = document.createTreeWalker(line, NodeFilter.SHOW_TEXT);
                let accumLength = 0;

                let newFocusNode = line.lastChild || line;
                let newFocusOffset = line.textContent.length;

                while(walker.nextNode()) {
                    const currentNode = walker.currentNode;

                    if(position <= accumLength + currentNode.length){
                        // Found node
                        newFocusNode = currentNode,
                        newFocusOffset = position - accumLength
                        break;
                    } 

                    accumLength += currentNode.length;
                    
                }

                this.moveCaretTo(newFocusNode, Math.max(newFocusOffset, 0))

                
            }

            calculateCaretColumn({node, offset, root} = {}){
                let caretPosition = offset;

                const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT)

                while(walker.nextNode()) {
                    if(walker.currentNode === node) {
                        break;

                    }

                    caretPosition += walker.currentNode.length
                }

                return caretPosition
            }



            get lines(){
                const startLine = this.startLine.line;
                const endLine = this.endLine.line;
                const isSingleLine = (startLine === endLine);
                const lines = [startLine];

                if(isSingleLine){
                    return lines;
                }

                let currentLine = startLine.nextElementSibling;

                while(currentLine !== endLine){
                    lines.push(currentLine);
                    currentLine = currentLine.nextElementSibling
                }

                lines.push(endLine);

                return lines

            }


            getLine(node, offset){
                const line = (node.classList && node.classList.contains("line"))
                    ? node
                    : node.parentNode.closest(".line");

                const plaintext = line.textContent;
                const mimetype = line.getAttribute("data-mimetype")
                const caretPosition = this.calculateCaretColumn({node, offset, root: line})
                const textToLeft = plaintext.substring(0, caretPosition) || "";
                const textToRight = plaintext.substring(caretPosition) || "";
                const prevChar = plaintext.charAt(caretPosition - 1);
                const nextChar = plaintext.charAt(caretPosition);

                return {
                    line,
                    plaintext,
                    caretPosition,
                    textToLeft,
                    textToRight,
                    mimetype,
                    prevChar,
                    nextChar
                }
            }

            get startLine(){
                const node = this.selection.anchorNode;
                const offset = this.selection.anchorOffset;

                return this.getLine(node, offset)

            }

            get endLine(){
                const node = this.selection.focusNode;
                const offset = this.selection.focusOffset;

                return this.getLine(node, offset)

            }

        }

        const insertText = (plaintext, caretOffset = 0) => {
            const startLine = mySelection.startLine;
            const endLine = mySelection.endLine;

            const mimetype = startLine.mimetype;
            const leftText = startLine.textToLeft;
            const rightText = endLine.textToRight;
            const multiline = (plaintext.split("\n").length > 1);

            const caretPosition = (multiline)
                ? plaintext.trim().length
                : leftText.length + plaintext.length;

            const textToInsert = `${leftText}${plaintext}${rightText}`;

            const parsedText = parse(textToInsert, mimetype);
            const docFragment = createFragmentFromString(parsedText);
           
            const selectLine = docFragment.lastElementChild;

            mySelection.startLine.line.replaceWith(...docFragment.childNodes)

            mySelection.moveCursorToAbsolute(selectLine, caretPosition + caretOffset)

        }

        

        const insertTab = () => {
            const startLine = mySelection.startLine;

            // Get absolute cartet position in current line
            const caretPosition = startLine.caretPosition;

            // Determine next tab stop
            const nextTabStop = 4 - (caretPosition % 4)

            // Create tab with spaces until next tab stop
            const tab = " ".repeat(nextTabStop)

            // Paste tab
            insertText(tab)
        }

        const onTabLeft = () => {
            const leadingWhiteSpaceRe = /^ +/;
            const startLine = mySelection.startLine;
            const mimetype = startLine.mimetype;
            const leadingWhitespace = startLine.plaintext.match(leadingWhiteSpaceRe)
            const indentLength = (leadingWhitespace)
                ? leadingWhitespace[0].length
                : 0;
            
            // Calculate how many spaces to get to previous tab stop 
            const distanceToPreviousTabStop = (indentLength) % 4 || 4;

             // Get position of cursor
            const caretPosition = startLine.caretPosition;

            // Set new indent length ( set to zero if negative number )
            const newIndentLength = Math.max(indentLength - distanceToPreviousTabStop, 0);

            // Create leading white space for indent
            const indent = " ".repeat(newIndentLength);

            // Replace current leading space with new indent
            const plaintext = startLine.plaintext.replace(leadingWhiteSpaceRe, indent);

            const parsedText = parse(plaintext, mimetype);
            const docFragment = createFragmentFromString(parsedText);
            const newLine = docFragment.firstElementChild;
            mySelection.lines[0].replaceWith(newLine)
            mySelection.moveCursorToAbsolute(newLine, caretPosition - distanceToPreviousTabStop)
        }

        let parseOnKeyUp = true;

        view.addEventListener("paste", (event) => {
            event.preventDefault();
            const pastedtext = event.clipboardData.getData("text/plain")
            insertText(pastedtext)
        })

        const removeLine = (line) => {
            const previousLine = line.previousElementSibling;
            const nextLine = line.nextElementSibling;
            line.remove();

            // Check if there are any lines left, if not then create one
            if(!view.firstElementChild){
                const newLine = createLine("New document ...", "html")
                view.append(newLine)
                mySelection.moveCaretTo(newLine, 0)
            } else {
                mySelection.moveCaretTo(nextLine || previousLine, 0)
            }
        }

        const removeLines = (lines) => {

        }

        const removeSelection = () => {
            insertText("")
        }

        view.addEventListener("cut", (event) => {
            event.preventDefault();

            const startLine = mySelection.startLine;
            const cutLine = mySelection.isCollapsed;
            const selectedText = (cutLine)
                ? `\n${startLine.plaintext}\n`
                : mySelection.selectedText

            event.clipboardData.setData('text/html', selectedText);
            event.clipboardData.setData('text/plain', selectedText);

            if(cutLine){
                removeLine(mySelection.startLine.line)
            } else {
                removeSelection();
            }

            parseOnKeyUp = false;

        });

        

        view.addEventListener("keydown", (event) => {
            const selectedText = mySelection.selectedText;
            const key = event.key;
            const shiftKey = event.shiftKey;
            const ctrlKey = event.ctrlKey;
            const startLine = mySelection.startLine;
            const endLine = mySelection.endLine;

            if(key === "Enter"){
                event.preventDefault();

                const leftText = startLine.textToLeft;
                const rightText = endLine.textToRight;
                
                insertText('\n')

                parseOnKeyUp = false;
            } else if(key === "Tab"){
                event.preventDefault();
                if(shiftKey){
                    onTabLeft()
                } else {
                    insertTab()
                }
                parseOnKeyUp = false;
            } else if(key === "\""){
                event.preventDefault();
                if(startLine.nextChar === "\""){
                    mySelection.moveCaretForward()
                } else {
                    insertText("\"\"", -1)
                }
                parseOnKeyUp = false;
            } else if(key === "a" && ctrlKey){
                parseOnKeyUp = false;

            }
            
        })

        const createFragmentFromString = (htmlString) => {
            const range = document.createRange();
            const docFragment = range.createContextualFragment(htmlString);
            
            return docFragment;
        }

        const moveCursorTo = (node, position) => {
            const range = document.createRange();
            range.selectNodeContents(node);
            selection.removeAllRanges();
            selection.addRange(range);

            selection.setPosition(node, position)
        }

        const mySelection = new Selection();


        view.addEventListener("keyup", (event) => {
            const key = event.key;
            
            const ignoreKeys = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "Shift", "Control"];

            const processKeyPress = ignoreKeys.indexOf(key) === -1;

            if(processKeyPress && parseOnKeyUp){
                const startLine = mySelection.startLine;
                const mimetype = startLine.mimetype;
                const caretPosition = startLine.caretPosition;


                const parsedText = parse(startLine.plaintext, mimetype);
                const docFragment = createFragmentFromString(parsedText);
                const multiline = (docFragment.childNodes.length > 1);
                
                const newLine = (multiline)
                    ? docFragment.lastElementChild
                    : docFragment.firstElementChild


                const moveCaretTo = (multiline) 
                    ? newLine.textContent.length
                    : caretPosition

                startLine.line.replaceWith(...docFragment.childNodes);
                mySelection.moveCursorToAbsolute(newLine, moveCaretTo)
                parseView(view.textContent);
            } else {
                parseOnKeyUp = true;
            }


        })

        const parseView = (plaintext) => {
            const msBefore = Date.now()
            console.group("TIME EVENT ::: (parseView())")

            const htmlID = /\[\[\[(?<htmlID>[\w-]*)\]\]\]/g;
            plaintext = plaintext.replace(htmlID, (match, htmlID) => {
                return ` data-id="${htmlID}" `
            })


            console.log(`Took ${Date.now() - msBefore} MS`)
            console.groupEnd();
            console.log("plaintext:", plaintext)
            preview.HTML = plaintext
        }



        view.innerHTML = "<div class='line' data-mimetype='html'>New document</div>"


        

    </script>

</body>
</html>