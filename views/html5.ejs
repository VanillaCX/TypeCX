<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        html, body {
            height: 100%;
        }
        body {
            margin: 0;
            display: grid;
            grid-template-areas: "file view";
            grid-template-columns: 1fr 1fr;
        }

        #savedFile {
            grid-area: file;
            background-color: darkcyan;
            color: white;
        }

        #view {
            grid-area: view;
            background-color: antiquewhite;
        }

        #view,
        #savedFile {
            font-size: 16px;
            font-family: monospace;
        }
    </style>

    <style>
        /* FUNCTIONALITY */
        .line:hover {
            background-color: aqua;
        }

        .line {
            border-left: 1px solid red
        }
        /* JSON */
        .json-property {
            color: white;
            background-color: pink;
        }

        /* JS */
        .js-comments-multiline {
            color: white;
            background-color: pink;
        }

        .js-comments-singleline {
            color: white;
            background-color: pink;
        }

        .js-string {
            color: white;
            background-color: pink;
        }

        .js-string-literal {
            color: white;
            background-color: red;
        }

        

        .js-property {
            color: white;
            background-color: pink;
        }

        .js-method-name {
            color: white;
            background-color: pink;
        }

        .js-symbol {
            color: white;
            background-color: pink;
        }

        .js-literal-quote-open {
            color: pink;
            background-color: black;
        }

        .js-literal-quote-close {
            color: pink;
            background-color: black;
        }

        .js-keyword {
            color: white;
            background-color: pink;
        }

        .js-path-part {
            color: white;
            background-color: pink;
        }

        .js-variable {
            color: white;
            background-color: pink;
        }

        .js-private-variable {
            color: white;
            background-color: pink;
        }

        /* CSS */

        .css-selector {
            color: white;
            background-color: pink;
        }

        .css-property {
            color: white;
            background-color: pink;
        }

        .css-value {
            color: white;
            background-color: pink;
        }

        .css-curly-brace-open {
            color: white;
            background-color: pink;
        }

        .css-curly-brace-close {
            color: white;
            background-color: pink;
        }

        .css-colon {
            color: white;
            background-color: pink;
        }

        .css-semi-colon {
            color: white;
            background-color: pink;
        }

        /* HTML */

        .html-tag-name {
            color: white;
            background-color: pink;
        }

        .html-equals {
            color: white;
            background-color: pink;
        }

        .html-spacer {
            color: white;
            background-color: pink;
        }

        .html-open-quote {
            color: white;
            background-color: pink;
        }

        .html-close-quote {
            color: white;
            background-color: pink;
        }

        .html-attr-name {
            color: white;
            background-color: pink;
        }

        .html-attr-value {
            color: white;
            background-color: pink;
        }

        .html-back-slash {
            color: white;
            background-color: pink;
        }

        .html-open-bracket {
            color: white;
            background-color: pink;
        }


        .html-close-bracket {
            color: white;
            background-color: pink;
        }

       


    </style>
</head>
<body>
    <textarea id="savedFile" spellcheck="false">
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document</title>
            <style>body {
                    color: red;
                    font-size: 12px;
                }
        
                h1 {
                    background-color: pink;
                }
            </style>
        </head>
        <body>
            <header>
                <h1>My Template</h1>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Totam commodi atque, dignissimos magnam animi, eum reiciendis neque soluta repellat quisquam saepe ex autem? Error cum molestias quas magnam, tempore expedita!</p>
            </header>
            <nav>
                <ul>
                    <li>
                        <a href="/home">Home</a>
                    </li>
                    <li>
                        <a href="/home">Home</a>
                    </li>
                    <li>
                        <a href="/home">Home</a>
                    </li>
                    <li>
                        <a href="/home">Home</a>
                    </li>
                    <li>
                        <a href="/home">Home</a>
                    </li>
                    <li>
                        <a href="/home">Home</a>
                    </li>
                </ul>
            </nav>
            <main>
                <h2>Sign in</h2>
        
                <form method="post" id="signin">
                    <label for="email">Email address</label>
                    <input type="text" id="email" placeholder="Enter your email"/>
                    <label for="password">Email address</label>
                    <input type="password" id="password" placeholder=""/>
        
                    <button type="button">Submit</button>
                </form>
            </main>
        
            <script>
                const form = document.getElementById("signin");
                const submit = document.getElementById("submit")
                
                submit.addEventListener("click", (event) => {
                    console.log("Validate user email and password")
                    console.log("Then submit it.")
                })

                const sayHello = (message) => {
                    alert("Hello", message);
                }

                function sayHello(message) {
                    alert("Hello", message);
                }

                class MyClass {
                    #hidden;

                    constructor({name = "Default", age = 12}){
                        this.name = name;
                        this.age = age;
                    }

                    static #sayHello(){

                    }

                    static info(){
                        return "Nothing here"
                    }

                    set message(message){
                        this.#hidden = message;
                    }

                    sayHello(message){
                        console.log(`Johnny says ${message}`)
                    }

                    // Single line comment

                    /* Multiline
                        comments
                        go here
                    */
                }
        
            </script>
        </body>
    </html>
            
    </textarea>

    <div id="view" contenteditable="plaintext-only" spellcheck="false"></div>



    <script>

        const savedFile = document.getElementById("savedFile")
        const view = document.getElementById("view")

        const rawDoc = savedFile.value;

        const wrap = (plaintext = "", classList = [], tagname = "span") => {
            const wrapper = document.createElement(tagname);
            wrapper.classList.add(...classList)

            const textNode = document.createTextNode(plaintext);

            wrapper.append(textNode);

            return wrapper.outerHTML
        }

        const patterns = [{
                mimetype: "js",
                name: "multilineComments",
                re: /(?<multilineComments>\/\*[\s\S]*?\*\/)/g,
                replacerFn: ({multilineComments} = {}) => { 
                    let html = wrap(multilineComments, ["js-comments-multiline"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "singleLineComment",
                re: /(?<singleLineComment>\/\/.*)/g,
                replacerFn: ({singleLineComment} = {}) => { 
                    let html = wrap(singleLineComment, ["js-comments-singleline"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "stringLiteral",
                re: /`(?<stringLiteral>[\s\S]*?)`/g,
                    replacerFn: ({stringLiteral} = {}) => { 
                    const variableRe = /\${ *(?<variable>[\w.\[\]"']*) *}/g;
                        
                    let html = wrap("`", ["js-literal-quote-open"]);
                    html += html = wrap(stringLiteral, ["js-string-literal"]);
                    html += html = wrap("`", ["js-literal-quote-close"]);


                    html = html.replace(variableRe, (match, variable) => {
                        let _html = wrap("$", ["js-string-literal-dollar"])
                        _html += wrap("{", ["js-string-literal-curly-brace-open"])
                        _html += wrap(variable, ["js-string-literal-curly-brace-close"])
                        _html += wrap("}", ["js-string-literal-curly-brace-close"])

                        return _html
                    })
            
                    return html
                }
            },{
                mimetype: "js",
                name: "string",
                re: /(?<string>((?<=')(?:[^'].*)(?='))|(?<=\")(?:[^\"].*)(?=\"))/g,
                replacerFn: ({string} = {}) => { 
                    let html = wrap(string, ["js-string"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "jsonProperty",
                re: /(?!")(?<jsonProp>[\w]+(?="* *:))/g,
                replacerFn: ({jsonProp} = {}) => { 
                    let html = wrap(jsonProp, ["json-property"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "property",
                re: /(?<property>#{0,1}[\w]+)(?= *=)/g,
                replacerFn: ({property} = {}) => { 
                    let html = wrap(property, ["js-property"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "method",
                re: /(?<method>#{0,1}[\w]+ *\()/g,
                replacerFn: ({method} = {}) => { 
                    let html = wrap(method, ["js-method-name"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "symbol",
                re: /(?<symbol>=>|[\(\);'\"={}:,])/g,
                    replacerFn: ({symbol} = {}) => { 
                    let html = wrap(symbol, ["js-symbol"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "keyword",
                re: /(?<keyword>\bconst|let|var|static|class\b)/g,
                replacerFn: ({keyword} = {}) => { 
                    let html = wrap(keyword, ["js-keyword", `js-keyword-${keyword}`]);

                    return html
                }
            },{
                mimetype: "js",
                name: "path",
                re: /(?<path>[\w]+\.)/g,
                replacerFn: ({path} = {}) => { 
                    let html = wrap(path, ["js-path-part"]);

                    return html
                }
            },{
                mimetype: "js",
                name: "variable",
                re: /(?<variable>#{0,1}[\w]+)/g,
                replacerFn: ({variable} = {}) => { 
                    const className = (variable.charAt(0) === "#")
                        ? "js-private-variable"
                        : "js-variable"

                    let html = wrap(variable, [className]);

                    return html
                }
            },
            
            {
                mimetype: "css",
                name: "selectors",
                re: /(?<indent> *)(?<selector>[\w:> ()-]+)(?= {|,)/g,
                replacerFn: ({indent, selector} = {}, parser) => {
                    let html = wrap(" ".repeat(indent.length), ["spacer"]);
                    html += html = wrap(selector, ["css-selector"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "properties",
                re: /(?<property>[\w-]+)(?= *:)/g,
                replacerFn: ({property} = {}, parser) => {
                    let html = wrap(property, ["css-property"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "values",
                re:  /(?<value>[^:]+)(?= *;)/g,
                replacerFn: ({value} = {}, parser) => {
                    let html = wrap(value, ["css-value"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "curlyBraceOpen",
                re:  /(?<curlyBraceOpen>{)/g,
                replacerFn: ({curlyBraceOpen} = {}, parser) => {
                    let html = wrap("{", ["css-curly-brace-open"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "curlyBraceClose",
                re:   /(?<curlyBraceClose>})/g,
                replacerFn: ({curlyBraceClose} = {}, parser) => {
                    let html = wrap(curlyBraceClose, ["css-curly-brace-close"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "colon",
                re:  /(?<colon>:)/g,
                replacerFn: ({colon} = {}, parser) => {
                    let html = wrap(colon, ["css-colon"]);

                    return html

                }
            },{
                mimetype: "css",
                name: "semiColon",
                re:  /(?<semiColon>;)/g,
                replacerFn: ({semiColon} = {}, parser) => {
                    let html = wrap(semiColon, ["css-semi-colon"]);

                    return html

                }
            },{
                /* Tagnames (opening and closing tags) */
                mimetype: "html",
                name: "tagnames",
                re: /(?<=<)(?<opentag>[\w-]+)|(?<=\/)(?<closetag>[\w-]+)/g,
                replacerFn: ({opentag, closetag} = {}, parser) => {
                    const tagname = opentag||closetag;
                    const classList = [`html-${tagname}-tag`, "html-tag-name"]
                    const html = wrap(tagname, classList);

                    return html

                }
            },{
                /* Attributes and Values */
                mimetype: "html",
                name: "tag-attributes",
                re: /(?!<[^<]* )(?<attrName>[\w\-]*)(?<spacer_1> *)=(?<spacer_2> *)(?:(?:(?<quoteType>["'])(?<stringValue>[\/\w.,= \-]*)\k<quoteType>)|(?<value>[\w-.]+))/g,
                replacerFn: ({attrName, spacer_1, spacer_2, quoteType, stringValue, value} = {}, parser) => {
                    let html = wrap(attrName, ["html-attr-name"]);
                    html += html = wrap(" ".repeat(spacer_1.length), ["html-spacer"]);
                    html += html = wrap("=", ["html-equals"]);
                    html += html = wrap(" ".repeat(spacer_2.length), ["html-spacer"]);

                    if(quoteType){
                        html += html = wrap(quoteType, ["html-open-quote"]);
                    }

                    html += html = wrap(stringValue||value, ["html-attr-value"]);

                    if(quoteType){
                        html += html = wrap(quoteType, ["html-close-quote"]);
                    }

                    return html;

                }
            },{
                /* CLosing Tag Bracket: </ */
                mimetype: "html",
                name: "openSlashBracket",
                re: /(?<openSlashBracket><\/)/g,
                replacerFn: ({openSlashBracket} = {}, parser) => {
                    let html = wrap("<", ["html-open-bracket"]);
                    html += html = wrap("/", ["html-back-slash"]);

                    return html
                }
            },{
                /* Bracket: < */
                mimetype: "html",
                name: "openBracket",
                re: /(?<openBracket><)/g,
                replacerFn: ({openBracket} = {}, parser) => {
                    let html = wrap("<", ["html-open-bracket"]);
                    
                    return html
                }
            },{
                /* Self Closing Tag Bracket: /> */
                mimetype: "html",
                name: "slashCloseBracket",
                re: /(?<slashCloseBracket>\/>)/g,
                replacerFn: ({slashCloseBracket} = {}, parser) => {
                    let html = wrap("/", ["html-back-slash"]);
                    html += html = wrap(">;", ["html-open-bracket"]);

                    return html            }
            },{
                /* Bracket: > */
                mimetype: "html",
                name: "closeBracket",
                re: /(?<closeBracket>>)/g,
                replacerFn: ({closeBracket} = {}, parser) => {
                    let html = wrap(">", ["html-close-bracket"]);
                    
                    return html            }
            }]
    
        const cachedPatterns = {}

        const getPatterns = (mimetype) => {

            if(cachedPatterns[mimetype]){
                return cachedPatterns[mimetype];
            }

            const regularExpressions = []
            const replacers = {}

            patterns
                .filter(pattern => pattern.mimetype === mimetype)
                .forEach((pattern, index) => {
                    const uuid = `_PATTERN_${mimetype.toUpperCase()}_${index}`;
                    const modifiedRe = `(?<${uuid}>${pattern.re.source})`

                    regularExpressions.push(modifiedRe)
                    replacers[uuid] = pattern.replacerFn
                })

            const re = new RegExp(regularExpressions.join("|"), "g")
            
            return cachedPatterns[mimetype] = {
                re,
                replacers
            }
        
        } 

        const mimetypeTagMap = {
            "style": "css",
            "script": "js",
        }

        const parse = (doc) => {
            const blocksRe = /(?<=<(?<blocktype>script|style)[\w\-=" ]*>)(?<content>[\w\W]*?)(?=<\/\k<blocktype>>)/g;
            const blocks = [];

            doc = doc.replace(blocksRe, (match, blockType, content) => {
                const uuid = crypto.randomUUID();

                let placeholder = `{{{${uuid}}}}`
                blocks.push({
                    uuid,
                    blockType,
                    content
                })

                return placeholder
            })

            // Firstly need to replace ALL the HTML in the HTML document
            const {re, replacers} = getPatterns("html")

            doc = doc.replace(re, (match, ...args) => {
                const groups = args[args.length - 1];
                const groupsAsArray = Array.from(Object.entries(groups));

                const [uuid] = groupsAsArray.find(([group, value]) => group.startsWith("_PATTERN_HTML_") && value);

                return replacers[uuid](groups)
            })


            blocks.forEach((block) => {
                const mimetype = mimetypeTagMap[block.blockType];

                const {re, replacers} = getPatterns(mimetype)

                if(Object.keys(replacers).length > 0){
                    
                    const blockDoc = block.content.replace(re, (match, ...args) => {
                        const groups = args[args.length - 1];
                        const groupsAsArray = Array.from(Object.entries(groups));

                        const [uuid] = groupsAsArray.find(([group, value]) => group && group.startsWith(`_PATTERN_${mimetype.toUpperCase()}_`) && value);

                        return replacers[uuid](groups)
                    })

                    const blockWrapper = document.createElement("span")
                    blockWrapper.classList.add(`${block.blockType}-block`)
                    blockWrapper.innerHTML = blockDoc;

                    doc = doc.replace(`{{{${block.uuid}}}}`, blockWrapper.outerHTML)
                }

                
            })


            view.innerHTML = doc;

            
        }

        

        


        savedFile.addEventListener("keyup", (event) => {
            const rawDoc = savedFile.value;
            parse(rawDoc)

        })


        

    </script>

</body>
</html>