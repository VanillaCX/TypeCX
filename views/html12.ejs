<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        html, body {
            height: 100%;
        }
        body {
            margin: 0;
            display: grid;
            grid-template-areas: "truth edit preview";
            grid-template-columns: 33vw 34vw 33vw;
        }

        #edit {
            grid-area: edit;
            position: relative;
            background-color: burlywood;
        }

        #truth {
            grid-area: truth;
            background-color: grey;
            color: white
        }

        #preview {
            grid-area: preview;
            height: 100%;
            width: 100%;
            border: 0;
        }

        #edit,
        #truth {
            font-family: monospace;
            font-size: 1.25em;
            font-weight: 400;
        }



        
        
        </style>

        <style>
            .html-bracket-left {
                color: grey;
            }

            .html-bracket-right {
                color: grey;
                
            }

            .html-back-slash {
                color: grey;
            }

            .html-nodename {
                color: blue;
            }

            .html-attr-name {
                color: lightgreen;
            }

            .html-attr-quote-open {
                color: grey;
            }

            .html-attr-value {
                color: darkgreen;
            }

            .html-attr-quote-close {
                color: grey;
            }

            .html-text {
                
            }

            .html-newline:before {
                content: " ";
                background-color: black;
            }

            

            .html-equal-sign {
                color: grey;
            }

            .html-spacer {
                
            }

        </style>

</head>
<body>
    <div id="edit" contenteditable="plaintext-only" spellcheck="false"></div>
    <textarea id="truth">
<html>
    <head>
        <title>My Page</title>
    </head>
    <body>
        <h1 class="header">My Page</h1>
        <h2>Welcome</h2>
        <div>
            Before
            <div>Inside</div>
            After
        </div>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Eos iste maxime debitis alias suscipit voluptates! Ipsum libero accusamus beatae dolore iste labore! Corporis, voluptate quam! Soluta repellendus et dolorem modi?</p>
    </body>
</html>
    </textarea>
    <iframe id="preview"></iframe>

    <script>

        const createFragmentFromString = (htmlString) => {
            const range = document.createRange();
            const docFragment = range.createContextualFragment(htmlString);
            
            return docFragment;
        }
        
        const edit = document.getElementById("edit")
        const truth = document.getElementById("truth")
        const preview = document.getElementById("preview")

        const previewWindow = preview.contentWindow;


        const wrap = (plaintext, classes, {key, value} = {}) => {
            const wrapper = document.createElement("span")
            wrapper.classList.add(...classes)

            if(key && value){
                wrapper.dataset[key] = value;
            }
            const textNode = document.createTextNode(plaintext);

            wrapper.append(textNode);

            return wrapper
        }

        const spacer = (length) => {
            return " ".repeat(length)
        }

        const patterns = [
            /*{
                mimetype: "html",
                name: "newline",
                re: /(?<newline>\n)/g,
                replacerFn: ({newline} = {}) => {

                    const options = {key: "newLineId", value: createUUID()}
                    let html = wrap("\n", ["html-newline"], options).outerHTML

                    return html
                }
            },*/{
                mimetype: "html",
                name: "nodename",
                re: /(?<=<)(?<opentag>[\w-]+)|(?<=\/)(?<closetag>[\w-]+)/g,
                replacerFn: ({opentag, closetag} = {}) => {
                    const nodename = opentag||closetag;
                    const classes = (opentag)
                        ? ["html-opening-tag"]
                        : ["html-closing-tag"]

                    const options = {key: "nodeNameId", value: createUUID()}
                    
                    classes.push("html-nodename")

                    let html = wrap(nodename, classes, options).outerHTML

                    return html
                }
            },{
                mimetype: "html",
                name: "attributes",
                re: /(?!<[^<]* )(?<attrName>[\w\-]*)(?<spacer_1> *)=(?<spacer_2> *)(?:(?:(?<quoteType>["'])(?<stringValue>[\/\w.,= \-]*)\k<quoteType>)|(?<value>[\w\-.]+))/g,
                replacerFn: ({attrName, spacer_1, spacer_2, quoteType, stringValue, value} = {}) => {
                    let html = wrap(attrName, ["html-attr-name"]).outerHTML;

                    html += wrap(spacer_1, ["html-spacer"]).outerHTML
                    html += wrap("=", ["html-equal-sign"]).outerHTML
                    html += wrap(spacer_2, ["html-spacer"]).outerHTML

                    if(quoteType){
                        html += wrap(quoteType, ["html-attr-quote-open"]).outerHTML
                    }

                    html += wrap(stringValue||value, ["html-attr-value"]).outerHTML

                    if(quoteType){
                        html += wrap(quoteType, ["html-attr-quote-close"]).outerHTML
                    }
                    return html
                }
            },{
                mimetype: "html",
                name: "brackets",
                re: /(?<selfClosingBracket>\/>)|(?<closeTagLeftBracket><\/)(?=[\w]+>)|(?<openTagLeftBracket><)(?=[\w-]+)|(?!<[\s\S]*?)(?<rightBracket>>)/g,
                replacerFn: ({selfClosingBracket, closeTagLeftBracket, openTagLeftBracket, rightBracket} = {}) => {
                    let html = "";

                    if(openTagLeftBracket){
                        html += wrap("<", ["html-bracket-left"]).outerHTML
                    } else if(closeTagLeftBracket){
                        html += wrap("<", ["html-bracket-right"]).outerHTML
                        html += wrap("/", ["html-back-slash"]).outerHTML

                    } else if(rightBracket){
                        html += wrap(">", ["html-bracket-right"]).outerHTML

                    } else if(selfClosingBracket){
                        html += wrap("/", ["html-back-slash"]).outerHTML
                        html += wrap(">", ["html-bracket-right"]).outerHTML

                    }
                    return html
                }
            }

        ]

        const cachedPatterns = {}

        const createUUID = ({prefix = "", removeDashes = false} = {}) => {
            let randomUUID = crypto.randomUUID();

            if(removeDashes){
                randomUUID.replace("-", "");
            }

            return `${prefix}${randomUUID}`
        }

        const getPatternsByMimetype = (mimetype) => {
            const replacerFunctions = {};
            let regularExpressions = [];

            patterns
                .filter(pattern => mimetype === mimetype)
                .forEach((pattern, index) => {
                    const uuid = `__PATTERN__${mimetype.toUpperCase()}_${index}`;
                    const re = `(?<${uuid}>${pattern.re.source})`;

                    replacerFunctions[uuid] = pattern.replacerFn;
                    regularExpressions.push(re);
                })
            
            return cachedPatterns[mimetype] = {
                re: new RegExp(regularExpressions.join("|"), "g"),
                replacerFunctions
            } 
        }

        const parse = (plaintext, mimetype) => {
            const {re, replacerFunctions} = cachedPatterns[mimetype] || getPatternsByMimetype(mimetype)

            plaintext = plaintext.replace(re, (match, ...args) => {
                const groups = args[args.length - 1];
                const groupsAsArray = Array.from(Object.entries(groups));

                const [uuid] = groupsAsArray.find(([group, value]) => group.startsWith(`__PATTERN__${mimetype.toUpperCase()}_`) && value);
                return replacerFunctions[uuid](groups)
            })

            const splitLines = plaintext.split("\n");

            const parsedLines = splitLines
                                    .map(line => {
                                        const docFrag = createFragmentFromString(line);
                                        const wrapper = document.createElement("div")
                                        wrapper.classList.add("editor-line")

                                        wrapper.append(...docFrag.childNodes)

                                        return wrapper.outerHTML
                                    })
                                    .join("")

            return parsedLines

        }

        
        const selection = window.getSelection();

        let parsed = parse(truth.value, "html")

        edit.innerHTML = parsed;

        const parsePreview = () => {
            console.log("Add node name ids to the tags for", edit);

            const clonedEdit = edit.cloneNode(true)

            console.log("clonedEdit:", clonedEdit)

            const nodeNameTags = clonedEdit.querySelectorAll("[data-node-name-id]");

            for (const node of nodeNameTags) {
                const uuid = node.dataset.nodeNameId;
                const tagName = node.textContent;

                const wrapper = document.createTextNode(`${tagName} data-node-name-id='${uuid}'`)

                node.replaceWith(wrapper)
            }

            return clonedEdit.textContent
        }


        const updateEdit = (uuid, plaintext) => {
            console.log("Get Tag for ", uuid)

            const startTag = edit.querySelector(`[data-node-name-id='${uuid}']`)
            const tagName = startTag.textContent

            console.log("startTag:", startTag)
            let newStartNode = startTag.previousSibling;
            let walkNode = startTag.nextSibling;
            let nest = 0;
            const nodesToDelete = [startTag]

            while(walkNode){
                nodesToDelete.push(walkNode)
                if(walkNode.textContent === tagName){
                    if (walkNode.classList.contains("html-opening-tag")){
                        nest++;
                    } else {
                        if(nest === 0){
                            // Found closing tag
                            console.log("END TAG:", walkNode)
                            nodesToDelete.push(walkNode.nextSibling)
                            break;
                        } else {
                            nest--;
                        }
                    }
                }



                if(walkNode.nextSibling){
                    walkNode = walkNode.nextSibling
                } else if(walkNode.parentNode.nextSibling){
                    walkNode = walkNode.parentNode.nextSibling.firstChild

                } else {
                    walkNode = null;
                }
            }

            nodesToDelete.forEach(node => node.remove())
            plaintext = plaintext.replace(/data-node-name-id="[\w-]*"/g, "")
            const parsedText = parse(plaintext, "html")
            const docFrag = createFragmentFromString(parsedText);
           /* const removeAttsFromTags = docFrag.querySelectorAll("[data-node-name-id]")
            Array.from(removeAttsFromTags).forEach(node => {
                console.log("&&&&&&&&&&&&&&&&&&&&", node)
                node.removeAttribute("data-node-name-id")
            })*/
            console.log("plaintext:", plaintext)
            console.log("docFrag:", docFrag)

            newStartNode.replaceWith(...docFrag.firstChild.childNodes)

            
            console.log("nodesToDelete:", nodesToDelete)
        }

        

        const initialisePreview = (node) => {
            const plaintext = parsePreview(node.textContent);
            // Convert Edit text content into doc fragment and put in iframe
            const domParser = new DOMParser();
            preview.contentWindow.document.firstChild.replaceWith(domParser.parseFromString(plaintext, "text/html").firstChild);

            // Add event listeners to preview
            const previewBody = preview.contentWindow.document.querySelector("body");

            previewBody.addEventListener("click", (event) => {
                const element = event.target;
                const uuid = element.dataset.nodeNameId;
                const isEditable = (uuid) ? true : false;

                if(isEditable){
                    const originalTextContent = element.innerHTML;
                    element.setAttribute("contenteditable", "plaintext-only")
                    element.setAttribute("spellcheck", "false")
                    element.focus()
                    console.log(element)

                    element.addEventListener("blur", (blurEvent) => {
                        const textContentOnBlur = element.innerHTML;
                        element.removeAttribute("contenteditable")
                        element.removeAttribute("spellcheck")
                        if(originalTextContent !== textContentOnBlur){
                            const editTwin = edit.querySelector(`span[data-node-name-id='${uuid}']`);
                            updateEdit(uuid, element.outerHTML);

                            //editTwin.innerHTML = textContentOnBlur;

                            // Update truth
                            //truth.value = edit.textContent
                        }
                        
                    }, {once: true})
                }            })

            // Add event listeners to edit
            edit.addEventListener("keyup", (event) => {
                //console.log("EDIT: keyup", event.target)
            })

            edit.addEventListener("keydown", (event) => {
                //console.log("EDIT: keydown", event.target)
                const shiftKey = event.shiftKey
                const key = event.key;
                const anchorNode = selection.anchorNode;
                const line = getLine(anchorNode)
            

                if(key === "Tab"){
                    event.preventDefault();
                    console.log("line:", line)
                    if(shiftKey){
                        console.log("Tab Left")
                    } else {
                        console.log("Insert tab")
                    }
                }
            })
        }


        initialisePreview(edit)

        const getLine = (node) => {
            const line = (node.classList && node.classList.contains("editor-line"))
                    ? node
                    : node.parentNode.closest(".editor-line");
            
            return line
        }

        const getCaretPosition = () => {
            const anchorNode = selection.anchorNode;
            const anchorOffset = selection.anchorOffset;
            const line = getLine(anchorNode);
            let caretPosition = anchorOffset;
            const treeWalk = document.createTreeWalker(line, NodeFilter.SHOW_TEXT);

            while(treeWalk.nextNode()) {
                if(treeWalk.currentNode === anchorNode){
                    // Found the node, stop counting
                    break;
                }

                caretPosition += treeWalk.currentNode.textContent.length
            }

            return {
                anchorNode,
                anchorOffset,
                caretPosition,
                line
            }
        }

        const setCaretPosition = ({line, caretPosition} = {}) => {
            const treeWalk = document.createTreeWalker(line, NodeFilter.SHOW_TEXT);
            let counter = 0;
            let targetNode = null;

            while(treeWalk.nextNode()) {
                if(counter + treeWalk.currentNode.textContent.length >= caretPosition){
                    targetNode = treeWalk.currentNode;
                    caretPosition = caretPosition - counter
                    break;
                }

                counter += treeWalk.currentNode.textContent.length
            }

            if(targetNode === null){
                targetNode = line.nextSibling.firstChild
                caretPosition = 0
            }

            if(targetNode){
                selection.setPosition(targetNode, caretPosition)

            }
        }

        const updateEditor = (node) => {
            let {caretPosition, anchorNode, anchorOffset} = getCaretPosition();
            const line = getLine(node)

            const plaintext = line.textContent;
            const parsedText = parse(plaintext, "html");
            const docFrag = createFragmentFromString(parsedText);
            const newLineStart = docFrag.firstChild
            line.replaceWith(...docFrag.childNodes)

            setCaretPosition({line: newLineStart, caretPosition});

        }

        const updatePreview = () => {
            initialisePreview(edit)

        }

        const observer = new MutationObserver((records, observer) => {
            const uniqueRecords = records.filter((record, index, self) => record.target.isConnected)
            const firstRecord = uniqueRecords[0].target;

            updateEditor(firstRecord);
            updatePreview()
        });

        const observerConfig = { childList: false, subtree: true, characterData: true, characterDataOldValue: true, attributes: false };
        observer.observe(edit, observerConfig);
        

    </script>

</body>
</html>